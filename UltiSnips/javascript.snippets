snippet req "require"
const $1 = require($2) $0
endsnippet

snippet reqc "require curly"
const { $1 } = require($2)$0
endsnippet

snippet	sp "spread"
...
endsnippet

snippet imp "import"
import $1 from '$1'
endsnippet

snippet impc "import curly"
import { $1 } from '$2'$0
endsnippet

snippet arrow "arrow function"
($1) => { $2 }$0
endsnippet

snippet arrowf "arrow flat"
$1 => $2
endsnippet

snippet cl "console log"
console.log($1)$0
endsnippet

snippet then "then function"
.then(($1) => { $2 })$0
endsnippet

snippet catch "catch function"
.catch((err) => { $2 })$0
endsnippet

snippet filter "filter"
.filter((v, i, a) => { $2 })$0
endsnippet

snippet map "map"
.map((v, i, a) => { $2 })$0
endsnippet

snippet reduce "reduce"
.reduce((ac, v, i, a) => { $2 })$0
endsnippet

snippet promise "promise"
new Promise((resolve, reject) => { $1 })$0
endsnippet

snippet des "describe"
describe($1, () => { $0 })
endsnippet

snippet bef "before"
before(() => { $1 })$0
endsnippet

snippet befall "before all"
beforeAll(() => { $1 })$0
endsnippet

snippet af "after"
after(() => { $1 })$0
endsnippet

snippet afall "after all"
afterAll(() => { $1 })$0
endsnippet

snippet exp "expect"
expect($1).$0
endsnippet

snippet modex "module export"
module.exports = $1
endsnippet

snippet exdef "export default"
export default $0
endsnippet

snippet exp	"export"
export { $0 }
endsnippet

snippet ptypes "react props"
$1.propTypes = {
	$0
}
endsnippet

snippet cname "class name"
className={ classes.$1 }
endsnippet

snippet cstyle "class name"
style={{ $1 }}
endsnippet

snippet comf "function component"
import React, { 
	Fragment,
	useState,
	useEffect,
} from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@material-ui/core/styles'

import styles from './styles'
import props from './props'

import {

} from '@material-ui/core'

const $1 = (props) => {
	const { t, i18n } = useTranslation()
	const { classes } = props

	useEffect(() => {  })

	return <Fragment>
		
	</Fragment>
}

$1.propTypes = props

export default withStyles(styles)($1)

endsnippet

snippet icon "icon"
import $1Icon from '@material-ui/icons/$1'
endsnippet

snippet state "functional state"
const [$1, set$1] = useState($2)
endsnippet

snippet ter "ternary"
	props.$1 === $2 ?
	$3 : 
	null
endsnippet

snippet input "form handle"
const inputHandler = (e) => { 
	set$1({
		...$1,
		[e.target.name]: e.target.value}	
	)
}
endsnippet

snippet it "it"
it('$1', () => {
	
})
endsnippet

snippet container "container"
<Container maxWidth={$1}>
	<Grid container>
	</Grid>
</Container>
endsnippet

snippet align "align"
alignItems={'$1'} justify={'$2'}
endsnippet

snippet gitem "grid item"
<Grid item xs={$1} sm={$1} md={$1} lg={$1} xl={$1}>
</Grid>
endsnippet

snippet styles "material ui styles"
const styles = theme => ({

})

export default styles
endsnippet

snippet props "react props"
import propTypes from 'prop-types'

export default {

}
endsnippet

snippet test "react test snip"
import React from 'react'
import { render } from '@testing-library/react'
import $1 from './$1'

test('$1 component test', () => {
  const Render = render(<$1 />)

	expect(true).toBe(true)
})
endsnippet

snippet break "breakpoints"
[theme.breakpoints.down('$1')]: {
	$2
}
endsnippet

snippet style "style"
style={{ $1 }}
endsnippet

snippet tr "translation"
{t('$1')}
endsnippet

snippet color "colors"
import { $1 } from '@material-ui/core/colors'
endsnippet

snippet route "route"
{
	exact: false,
	path: '/$1',
	component: $2,
	key: '$1',
},
endsnippet

snippet router "express router"
import express from 'express'
import $1Controller from '../controller/$2_controller'

const router = express.Router()

router.get('/', $1Controller.getAll)
router.get('/:id', $1Controller.get)
router.post('/', $1Controller.post)
router.put('/:id', $1Controller.put)
router.delete('/:id', $1Controller.delete)

export default router
endsnippet

snippet controller "express controller"
const $1Controller = {
	getAll: (req,res,next) => {  
		return res.json()
	},
	get: (req,res,next) => { 
		return res.json() 
	},
	post: (req,res,next) => { 
		return res.json() 
	},
	put: (req,res,next) => { 
		return res.json() 
	},
	delete: (req,res,next) => { 
		return res.json() 
	},
}

export default $1Controller
endsnippet

snippet rrd "react router dom"
import {
	BrowserRouter,
	Switch,
	Route,
} from 'react-router-dom'
endsnippet

snippet model "mongoose model"
import mongoose from '../config/mongoose'

const schema = mongoose.Schema({

})

const $1 = mongoose.model($1, schema)

export default $1
endsnippet

snippet pe "process env"
process.env.
endsnippet

snippet rtfn "router function"
(req, res, next) => {
	return 
}
endsnippet

snippet dotenv "dotenv"
import dotenv from 'dotenv'

dotenv.config()
endsnippet

snippet handler "handler"
const $1Handler = (e) => {}
endsnippet

snippet rts "routes"
import routes from '../../../route/routes'
endsnippet

snippet img "images"
import images from '../../../style/images'
endsnippet

snippet link "link"
import { Link } from 'react-router-dom'
endsnippet

snippet list "list import"
ListItem,
ListItemText,
ListItemIcon,
ListItemAvatar,
ListItemSecondaryAction,
ListSubheader,
endsnippet

snippet mtile "message tile"
<ListItem component={Paper}>
	<ListItemAvatar>
		<Avatar />
	</ListItemAvatar>
	<ListItemText
		primary={$1}
		secondary={$2}
	/>
	<ListSubheader>
		<ListItemText
			primary={$3}
			secondary={$4}
		/>
	</ListSubheader>
	<ListItemSecondaryAction>
		<MoreVertIcon />
	</ListItemSecondaryAction>
</ListItem>
endsnippet

snippet llist "list"
<ListItem button>
	<ListItemText className={ classes.header }>
	 	$1
	</ListItemText>
</ListItem>		
<ListItem button>
	<ListItemText className={ classes.text }>
		$2
	</ListItemText>
</ListItem>		
endsnippet 

snippet mcolor "main color"
theme.palette.primary.main
endsnippet

snippet spa "spacing"
theme.spacing($1)
endsnippet

snippet adorn "adornment"
const $1 = {
	startAdornment: <InputAdornment>
		<$2 />
	</InputAdornment>
}
endsnippet

snippet cract "crud actions"
export const GET_$1_ATTEMPT = 'GET_$1_ATTEMPT'
export const GET_$1_SUCCESS = 'GET_$1_SUCCESS'
export const GET_$1_ERROR = 'GET_$1_ERROR'

export const GET_$1_ATTEMPT = 'GET_$1_ATTEMPT'
export const GET_$1_SUCCESS = 'GET_$1_SUCCESS'
export const GET_$1_ERROR = 'GET_$1_ERROR'

export const POST_$1_ATTEMPT = 'POST_$1_ATTEMPT'
export const POST_$1_SUCCESS = 'POST_$1_SUCCESS'
export const POST_$1_ERROR = 'POST_$1_ERROR'

export const PUT_$1_ATTEMPT = 'PUT_$1_ATTEMPT'
export const PUT_$1_SUCCESS = 'PUT_$1_SUCCESS'
export const PUT_$1_ERROR = 'PUT_$1_ERROR'

export const DELETE_$1_ATTEMPT = 'DELETE_$1_ATTEMPT'
export const DELETE_$1_SUCCESS = 'DELETE_$1_SUCCESS'
export const DELETE_$1_ERROR = 'DELETE_$1_ERROR'
endsnippet

snippet connect "redux connect"
const mapStateToProps = (state) => ({  

})

const mapDispatchToProps = (dispatch) => ({  

})
endsnippet
