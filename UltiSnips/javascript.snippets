snippet req "require"
const $1 = require($2) $0
endsnippet

snippet reqc "require curly"
const { $1 } = require($2)$0
endsnippet

snippet	sp "spread"
...
endsnippet

snippet imp "import"
import  from '$1'
endsnippet

snippet impc "import curly"
import { } from '$1'$0
endsnippet

snippet arr "arrow function"
($1) => { $2 }$0
endsnippet

snippet arro "arrow return object"
($1) => ({ $2 })
endsnippet

snippet arre "arrow export"
export const ($1) => {}
endsnippet

snippet arrf "arrow flat"
$1 => $2
endsnippet

snippet cl "console log"
console.log($1)$0
endsnippet

snippet then "then function"
.then(($1) => $1)$0
endsnippet

snippet catch "catch function"
.catch((err) => err)$0
endsnippet

snippet filter "filter"
.filter((v, i, a) => { $2 })$0
endsnippet

snippet map "map"
.map((v, i) => $2)$0
endsnippet

snippet reduce "reduce"
.reduce((ac, v, i, a) => { $2 })$0
endsnippet

snippet promise "promise"
new Promise((resolve, reject) => { $1 })$0
endsnippet

snippet des "describe"
describe($1, (true) => { $0 })
endsnippet

snippet bef "before"
beforeEach(() => { $1 })$0
endsnippet

snippet befall "before all"
beforeAll(() => { $1 })$0
endsnippet

snippet af "after"
afterEach(() => { $1 })$0
endsnippet

snippet afall "after all"
afterAll(() => { $1 })$0
endsnippet

snippet exp "expect"
expect($1).$0
endsnippet

snippet modex "module export"
module.exports = $1
endsnippet

snippet exdef "export default"
export default $0
endsnippet

snippet exp	"export"
export { $0 }
endsnippet

snippet ptypes "react props"
$1.propTypes = {
	$0
}
endsnippet

snippet cname "class name"
className={ classes.$1 }
endsnippet

snippet cstyle "class name"
style={{ $1 }}
endsnippet

snippet comf "function component"
import React, { 
	Fragment,
	useState,
	useEffect,
} from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@mui/styles'

import styles from './styles'
import props from './props'

import {
	Grid,
	Typography,
} from '@mui/material'

const $1 = (props) => {
	const { t } = useTranslation()
	const { classes } = props

	useEffect(() => {  })

	return <Fragment>
		
	</Fragment>
}

$1.propTypes = props

export default withStyles(styles)($1)

endsnippet

snippet icon "icon"
import { } from 'react-icons/$1'
endsnippet

snippet state "functional state"
const [$1, set${1/\w+/\u$0/g}] = useState($2)
endsnippet

snippet ter "ternary"
	props.$1 === $2 ?
	$3 : 
	null
endsnippet

snippet th "text handler"
const textHandler = (e) => { 
	set$1({
		...$1,
		[e.target.name]: e.target.value
	})
}
endsnippet

snippet sh "switch handler"
const switchHandler = (e) => { 
	set$1({
		...$1,
		[e.target.name]: e.target.checkedi
	})
}
endsnippet

snippet slih "text handler"
const sliderHandler = (e, v) => { 
	set$1({
		...$1,
		[e]: v
	})
}
endsnippet

snippet it "it"
it('$1', async (done) => {

	done()
})
endsnippet

snippet cont "container"
<Container maxWidth={$1}>
	<Grid container>
	</Grid>
</Container>
endsnippet

snippet align "align"
alignItems={'center'} justifyContent={'center'}
endsnippet

snippet gitem "grid item"
<Grid item 
	xs={$1} 
	sm={$1} 
	md={$1} 
	lg={$1} 
	xl={$1}>

</Grid>
endsnippet

snippet styles "material ui styles"
const styles = theme => ({

})

export default styles
endsnippet

snippet props "react props"
import propTypes from 'prop-types'

export default {

}
endsnippet

snippet test "react test snip"
import React from 'react'
import { render } from '@testing-library/react'
import $1 from './$1'
import { BrowserRouter } from 'react-router-dom'

test('$1 component test', () => {
  const Render = render(
	  <BrowserRouter>
			<$1 />
		</BrowserRouter>
	)

	expect(true).toBe(true)
})
endsnippet

snippet tbd "breakpoints"
[theme.breakpoints.down('$1')]: {
	$2
}
endsnippet

snippet tbu "breakpoints"
[theme.breakpoints.up('$1')]: {
	$2
}
endsnippet

snippet tbb "breakpoints"
[theme.breakpoints.between('$1', '$2')]: {
	$2
}
endsnippet

snippet mt "margin top"
marginTop: [$1, '!important'],
endsnippet

snippet mb "margin bottom"
marginBottom: [$1, '!important'],
endsnippet

snippet ml "margin left"
marginLeft: [$1, '!important'],
endsnippet

snippet mr "margin right"
marginRight: [$1, '!important'],
endsnippet

snippet pt "padding top"
paddingTop: [$1, '!important'],
endsnippet

snippet pb "padding bottom"
paddingBottom: [$1, '!important'],
endsnippet

snippet pl "padding left"
paddingLeft: [$1, '!important'],
endsnippet

snippet pr "padding right"
paddingRight: [$1, '!important'],
endsnippet

snippet tt "text transform"
textTransform: ['none', '!important'],
endsnippet

snippet td "text decoration"
textDecoration: ['none', '!important'],
endsnippet

snippet bg "backgroundColor"
backgroundColor: [$1, '!important'],
endsnippet

snippet color "color"
color: [$1, '!important'],
endsnippet

snippet hov "hover"
'&:hover': {
	backgroundColor: [$1, '!important'],
},
endsnippet

snippet tf "textField"
<TextField 
	fullWidth
	className={classes.field}
	margin={'dense'}
	variant={'outlined'}
	name={'$1'}
	onChange={$2}
	placeholder={$3}
/>
endsnippet

snippet button "button"
<Button
	fullWidth
	variant={'outlined'}
	className={classes.button}
	onClick={$1}
	startIcon={}
>
		$2
</Button>
endsnippet

snippet vr "variant"
variant={'$1'}
endsnippet

snippet oc "on click"
onClick={$1}
endsnippet

snippet och "on click"
onChange={$1}
endsnippet

snippet style "style"
style={{ $1 }}
endsnippet

snippet tr "translation"
{t('$1')}
endsnippet

snippet color "colors"
import { $1 } from '@mui/material/colors'
endsnippet

snippet route "route"
{
	exact: false,
	path: '/$1',
	component: $2,
},
endsnippet

snippet router "express router"
import express from 'express'
import $1Controller from '../controller/${1/\w+/\l$0/g}.controller'

const router = express.Router()

router.get('/', $1Controller.index.bind($1Controller))
router.get('/:id', $1Controller.get.bind($1Controller))
router.post('/', $1Controller.post.bind($1Controller))
router.put('/:id', $1Controller.put.bind($1Controller))
router.delete('/:id', $1Controller.delete.bind($1Controller))

export default router
endsnippet

snippet controller "express controller"
import $1Service from '../service/${1/\w+/\l$0/g}.service'
import Controller from './controller'

class $1Controller extends Controller {
	constructor (args) {
		super(args)
	}
}

export default new $1Controller({
	service: $1Service
})
endsnippet

snippet expservice "express service"
import ${1/\w+/\u$0/g}Repository from '../repository/$1.repository'
import Service from './service'

class ${1/\w+/\u$0/g}Service extends Service {
	constructor(args) {
		super(args)
	}
}

export default new ${1/\w+/\u$0/g}Service({
	repository: ${1/\w+/\u$0/g}Repository,
})
endsnippet

snippet rrd "react router dom"
import {
	BrowserRouter,
	Switch,
	Route,
} from 'react-router-dom'
endsnippet

snippet model "mongoose model"
import mongoose, { Schema } from 'mongoose'

const ${1/\w+/\u$0/g}Schema = new Schema(
  {},
  { strict: false, timestamps: true },
)

/**
 *  @param name
 *  @param schema
 *  @param collection
 */
const ${1/\w+/\u$0/g} = mongoose.model('$1', ${1/\w+/\u$0/g}Schema, '$1s')

export default ${1/\w+/\u$0/g}
endsnippet

snippet pe "process env"
process.env.
endsnippet

snippet per "process env react"
process.env.REACT_APP_$1
endsnippet

snippet rtfn "router function"
(req, res, next) => {
	return $1 
}
endsnippet

snippet dotenv "dotenv"
import dotenv from 'dotenv'

dotenv.config()
endsnippet

snippet rts "routes"
import routes from '../../../route/routes'
endsnippet

snippet assets "assets"
import assets from '../../../style/assets'
endsnippet

snippet aii "async image import"
import AsyncImage from '../../../component/main/asyncImage/AsyncImage'
endsnippet

snippet link "link"
import { Link } from 'react-router-dom'
endsnippet

snippet linkc "link component"
<Link className={classes.link} to={$1}>
	$2
</Link>
endsnippet

snippet palet "main color"
theme.palette.primary.main
endsnippet

snippet paletc "palet common"
theme.palette.common.$1
endsnippet

snippet space "spacing"
theme.spacing($1)
endsnippet

snippet maprx "redux connect"
const mapStateToProps = (state) => ({  

})

const mapDispatchToProps = (dispatch) => ({  

})

endsnippet

snippet store "redux store"
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
import rootReducer from '../reducer/root.reducer'

const store = createStore(
  rootReducer,
  applyMiddleware(thunk),
)

export default store

endsnippet

snippet rootreducer "root reducer"
import { combineReducers } from 'redux'

const rootReducer = combineReducers({

})

export default rootReducer

endsnippet

snippet connect "connect function"
export default connect(
	mapStateToProps, 
	mapDispatchToProps,
)(withStyles(styles)($1))
endsnippet

snippet dispatch "dispatch"
dispatch({
	type: $1,
	data: $2,
})
endsnippet

snippet rncom "react native component"
import React, { useEffect } from 'react'
import {
	View,
} from 'react-native'

import styles from './styles'
import props from './props'

import i18n from '../../../locale/i18n'

const $1 = (props) => {  
	useEffect(() => {})

	return <View>
	</View>
}

$1.propTypes = props

export default $1
endsnippet

snippet rnstyle "react native style"
import {
	StyleSheet,
	Dimensions,
} from 'react-native'

const width = Dimensions.get('window').width;
const height = Dimensions.get('window').height;

const styles = {

}

export default StyleSheet.create(styles)
endsnippet

snippet rntest "react native test"
import 'react-native'
import React from 'react'
import $1 from './$1'

import renderer from 'react-test-renderer'

it('renders correctly', () => {
  renderer.create(<$1 />)
})
endsnippet

snippet anim "animation"
'@global': {
	'@keyframes $1': {
		from: {},
		to: {},
		'0%': {},
		'100%': {},
	}
}
endsnippet

snippet mm "mongo model"
import mongoose from 'mongoose'

const schema = mongoose.Schema({

},{ 
	strict: false 
})

export default mongoose.model('$1', schema, '$1') 

endsnippet

snippet hdd "hidden down"
<Hidden $1Down>

</Hidden>
endsnippet

snippet hdu "hidden up"
<Hidden $1Up>

</Hidden>
endsnippet

snippet fake "fake data"
const data = new Array($1)
	.fill({})
	.map((v, i) => ({  
		$0		
	}))
endsnippet

snippet pic "lorem picsum"
'https://picsum.photos/$1/$2'
endsnippet 

snippet authactions "auth actions"
export const LOGIN_WITH_EMAIL_REQUEST = 'LOGIN_WITH_EMAIL_REQUEST'
export const LOGIN_WITH_EMAIL_SUCCESS = 'LOGIN_WITH_EMAIL_SUCCESS'
export const LOGIN_WITH_EMAIL_ERROR = 'LOGIN_WITH_EMAIL_ERROR'

export const SIGNUP_WITH_EMAIL_REQUEST = 'SIGNUP_WITH_EMAIL_REQUEST'
export const SIGNUP_WITH_EMAIL_SUCCESS = 'SIGNUP_WITH_EMAIL_SUCCESS'
export const SIGNUP_WITH_EMAIL_ERROR = 'SIGNUP_WITH_EMAIL_ERROR'

export const SIGNIN_WITH_FACEBOOK_REQUEST = 'SIGNIN_WITH_FACEBOOK_REQUEST'
export const SIGNIN_WITH_FACEBOOK_SUCCESS = 'SIGNIN_WITH_FACEBOOK_SUCCESS'
export const SIGNIN_WITH_FACEBOOK_ERROR = 'SIGNIN_WITH_FACEBOOK_ERROR'

export const SIGNIN_WITH_GOOGLE_REQUEST = 'SIGNIN_WITH_GOOGLE_REQUEST'
export const SIGNIN_WITH_GOOGLE_SUCCESS = 'SIGNIN_WITH_GOOGLE_SUCCESS'
export const SIGNIN_WITH_GOOGLE_ERROR = 'SIGNIN_WITH_GOOGLE_ERROR'

endsnippet

snippet actions "redux action"
export const GET_$1S_REQUEST = 'GET_$1S_REQUEST'
export const GET_$1S_SUCCESS = 'GET_$1S_SUCCESS'
export const GET_$1S_ERROR = 'GET_$1S_ERROR'

export const GET_$1_REQUEST = 'GET_$1_REQUEST'
export const GET_$1_SUCCESS = 'GET_$1_SUCCESS'
export const GET_$1_ERROR = 'GET_$1_ERROR'

export const POST_$1_REQUEST = 'POST_$1_REQUEST'
export const POST_$1_SUCCESS = 'POST_$1_SUCCESS'
export const POST_$1_ERROR = 'POST_$1_ERROR'

export const PUT_$1_REQUEST = 'PUT_$1_REQUEST'
export const PUT_$1_SUCCESS = 'PUT_$1_SUCCESS'
export const PUT_$1_ERROR = 'PUT_$1_ERROR'

export const DELETE_$1_REQUEST = 'DELETE_$1_REQUEST'
export const DELETE_$1_SUCCESS = 'DELETE_$1_SUCCESS'
export const DELETE_$1_ERROR = 'DELETE_$1_ERROR'
endsnippet

snippet dispatcher "dispatchers"
import $1Service from '../../service/`!p snip.rv=t[1].lower()`.service'
import * as actions from '../action/`!p snip.rv=t[1].lower()`.actions'

export const get$1s = (filters = {}) => (dispatch) => {  
	dispatch({
		type: actions.GET_`!p snip.rv=t[1].upper()`S_REQUEST,
		data: null,
	})

	$1Service.index(filters)
		.then((res) => dispatch({
			type: actions.GET_`!p snip.rv=t[1].upper()`S_SUCCESS,
			data: res,
		}))	
		.catch((err) => dispatch({
			type: actions.GET_`!p snip.rv=t[1].upper()`S_ERROR,
			data: err,
		}))
}

export const get$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.GET_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})

	$1Service.get(id)
		.then((res) => dispatch({
			type: actions.GET_`!p snip.rv=t[1].upper()`_SUCCESS,
			data: res,
		}))	
		.catch((err) => dispatch({
			type: actions.GET_`!p snip.rv=t[1].upper()`_ERROR,
			data: err,
		}))
}

export const post$1 = (body) => (dispatch) => {  
	dispatch({
		type: actions.POST_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}

export const put$1 = ({ id, body }) => (dispatch) => {  
	dispatch({
		type: actions.PUT_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}

export const delete$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.DELETE_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}
endsnippet

snippet suite "test suite"
describe('$1 Test Suite', () => { 
	it('Example Test', async (done) => {
		expect(true).toBe(true)
		done()
	})	
})
endsnippet

snippet prom "promise"
new Promise ( (resolve, reject) => {   $1 
})
endsnippet

snippet rservice "service init"
import Service from './service'
import HttpService from './http_service'
import CacheService from './cache_service'

class $1Service extends Service {
	constructor (args) {
		super(args)
	}
}

export default new $1Service({
	http: HttpService,
	cache: CacheService,
})
endsnippet

snippet class "class"
class $1 {
	constructor (args) {

	}
}

export default $1
endsnippet 

snippet repo "repository"
import $1 from '../model/${1/\w+/\l$0/g}'
import Repository from './repository'

class $1Repository extends Repository {
  constructor(args) {
    super(args)
  }
}

export default new $1Repository({
	model: $1,
})
endsnippet

snippet event "express event"
import Event from '../event'

class $1 extends Event {
	constructor(args) {
		super(args)
	}
}

export default $1

endsnippet

snippet ax "axios"
axios
	.$1({
	
	})
	.then(res => res)
	.catch(err => err)
endsnippet

snippet i18n "i18n"
import i18n from 'i18next'
import languageDetector from 'i18next-browser-languagedetector'
import { initReactI18next } from 'react-i18next'
import xhr from 'i18next-xhr-backend'
import en from './translations/en_US.json'
import tr from './translations/tr_TR.json'

i18n
  .use(xhr)
  .use(languageDetector)
  .use(initReactI18next)
  .init({
    resources: {
      tr: tr,
      en: en,
    },
    // lng: 'tr',
    fallbackLng: 'tr',
    debug: true,
    ns: ['translations'],
    defaultNS: 'translations',
    keySeparator: '.',
    interpolation: {
      escapeValue: false,
      formatSeparator: ',',
    },
    react: {
      useSuspense: false,
      wait: true,
      bindi18n: 'languagechanged loaded',
      bindI18nStore: 'added removed',
      nsMode: 'default',
    },
  })

export default i18n

endsnippet	

snippet helm "helmet" 
<Helmet>
  <title>$1</title>
  <meta
    name='description'
    content='$2'
  />
</Helmet>
endsnippet

snippet app "app" 
import React, { Fragment } from 'react'

import { I18nextProvider } from 'react-i18next'
import i18n from './locale/i18n'

import { Provider } from 'react-redux'
import store from './redux/store/index'

import { ThemeProvider } from '@mui/material'
import theme from './style/theme'

import Main from './page/main/Main'

const App = (props) => {
  return (
    <Fragment>
      <Provider store={store}>
        <I18nextProvider i18n={i18n}>
          <ThemeProvider theme={theme}>
            <Main />
          </ThemeProvider>
        </I18nextProvider>
      </Provider>
    </Fragment>
  )
}

export default App

endsnippet

snippet fs "Description" 
fontSize: [$1, '!important'],
endsnippet

snippet fw "Description" 
fontWeight: [$1, '!important'],
endsnippet

snippet it "important"
'!important'
endsnippet

snippet ai "async image"
<AsyncImage src={$1} width={$2} height={$3} alt={$4}/>
endsnippet

snippet aic "async image"
import React, { Fragment, useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@mui/styles'

import styles from './styles'
import props from './props'

import Skeleton from 'react-loading-skeleton'

const AsyncImage = props => {
  const { t } = useTranslation()
  const { classes } = props
  const [status, setStatus] = useState(false)

  useEffect(() => {})

  const onLoad = e => setStatus(true)

  return (
    <Fragment>
      {status ? (
        <img
          src={props.src}
          alt={props.alt}
          style={{
            width: props.width,
            height: props.height,
          }}
        />
      ) : (
        <Fragment>
          <img
            src={props.src}
            alt={props.alt}
            style={{
              width: props.width,
              height: props.height,
            }}
            onLoad={onLoad}
          />
          <Skeleton
            style={{
              width: props.width,
              height: props.height,
            }}
          />
        </Fragment>
      )}
    </Fragment>
  )
}

AsyncImage.propTypes = props

export default withStyles(styles)(AsyncImage)
endsnippet

snippet value "important" 
[$1, '!important'],
endsnippet

snippet rtc "router component"
import React, { Fragment, useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@mui/styles'
import { Route } from 'react-router-dom'

import styles from './styles'
import props from './props'

import { Grid, Typography } from '@mui/material'

const $1Route = ({ component: Component, ...rest }) => {
  const { t } = useTranslation()
  const { classes } = rest

  useEffect(() => {})

  return (
    <Fragment>
      <Route
        {...props}
        render={props => <Component {...props} />}
      />
    </Fragment>
  )
}

$1Route.propTypes = props

export default withStyles(styles)($1Route)

endsnippet

snippet errbo "error boundary"
import React, {
  Fragment,
  useState,
  useEffect,
  Component,
} from 'react'
import {
  useTranslation,
  withTranslation,
} from 'react-i18next'
import { withStyles } from '@mui/styles'

import styles from './styles'
import props from './props'

import { Grid, Typography } from '@mui/material'

class ErrorBoundary extends Component {
  constructor(props) {
    super(props)
    this.state = {
      hasError: false,
    }
  }

  static getDerivedStateFromError(err) {
    return {
      hasError: true,
    }
  }

  render() {
    const { classes } = this.props
    const { t } = this.props

    return (
      <Fragment>
        {this.state.hasError ? (
          <Grid
            container
            className={classes.container}
					>
					</Grid>
        ) : (
          this.props.children
        )}
      </Fragment>
    )
  }
}

ErrorBoundary.propTypes = props

export default withTranslation()(
  withStyles(styles)(ErrorBoundary)
)

endsnippet

snippet lazy "lazy"
const $1 = lazy(() => ('./$1'))
endsnippet

snippet sus "suspense"
<Suspense fallback={<Fallback />}>
	$1
</Suspense>
endsnippet

snippet ersus "suspense"
<ErrorBoundary>
	<Suspense fallback={<$1 />}>
		$2
	</Suspense>
</ErrorBoundary>
endsnippet

snippet rrc "react redux connect" 
import { connect } from 'react-redux'
endsnippet

snippet jscom "line comment"
{/** $1 */}
endsnippet

snippet pretconf "prettier config"
module.exports = {
  /**
   * Print Width
   * https://prettier.io/docs/en/options.html#print-width
   *
   * Specify the line length that the printer will wrap on.
   *
   * printWidth: <int>
   * default: 80
   */
  printWidth: 60,

  /**
   * Tab Width
   * https://prettier.io/docs/en/options.html#tab-width
   *
   * Specify the number of spaces per indentation-level.
   *
   * tabWidth: <int>
   * default: 2
   */
  tabWidth: 2,

  /**
   * Tabs
   * https://prettier.io/docs/en/options.html#tabs
   *
   * Indent lines with tabs instead of spaces.
   *
   * useTabs: <bool>
   * default: false
   */
  useTabs: false,

  /**
   * Semicolons
   * https://prettier.io/docs/en/options.html#semicolons
   *
   * Print semicolons at the ends of statements
   *
   * semi: <bool>
   * default: true
   */
  semi: false,

  /**
   * Quotes
   * https://prettier.io/docs/en/options.html#quotes
   *
   * Use single quotes instead of double quotes.
   *
   * singleQuote: <bool>
   * default: false
   */
  singleQuote: true,

  /**
   * Quote Props
   * https://prettier.io/docs/en/options.html#quote-props
   *
   * Change when properties in objects are quoted.
   *
   * quoteProps: "<as-needed|consistent|preserve>"
   * default: "as-needed"
   */
  // quoteProps: 'as-needed',

  /**
   * JSX Quotes
   * https://prettier.io/docs/en/options.html#jsx-quotes
   *
   * Use single quotes instead of double quotes in JSX.
   *
   * jsxSingleQuote: <bool>
   * default: false
   */
 	jsxSingleQuote: true,

  /**
  * Trailing Commas
  * https://prettier.io/docs/en/options.html#trailing-commas
  *
  * Print trailing commas wherever possible when multi-line. (A single-line array, for example, never gets trailing commas.)
  *
  * trailingComma: "<es5|none|all>"
  * default: 'es5'
  */
  // trailingComma: 'es5',

  /**
  * Bracket Spacing
  * https://prettier.io/docs/en/options.html#bracket-spacing
  *
  * Print spaces between brackets in object literals.
  *
  * bracketSpacing: <bool>
  * default: true
  */
  // bracketSpacing: true,

  /**
   * JSX Brackets
   * https://prettier.io/docs/en/options.html#jsx-brackets
   *
   * Put the > of a multi-line JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
   *
   * jsxBracketSameLine: <bool>
   * default: false
   */
  jsxBracketSameLine: false,

  /**
   * Arrow Function Parentheses
   * https://prettier.io/docs/en/options.html#arrow-function-parentheses
   *
   * Include parentheses around a sole arrow function parameter.
   *
   * arrowParens: "<always|avoid>"
   * default: "always"
   */
  arrowParens: 'avoid',

  /**
   * Range
   * https://prettier.io/docs/en/options.html#range
   *
   * Format only a segment of a file.
   *
   * rangeStart: <int>
   * default: 0
   *
   * rangeEnd: <int>
   * default: Infinity
   */
  // rangeStart: 0,
  // rangeEnd: Infinity,

  /**
   * Parser
   * https://prettier.io/docs/en/options.html#parser
   *
   * Specify which parser to use.
   *
   * parser: "<string>" | require("./my-parser")
   * no default
   *
   */
  // parser: '',

  /**
   * File Path
   * https://prettier.io/docs/en/options.html#file-path
   *
   * Specify the file name to use to infer which parser to use.
   *
   * filepath: "<string>"
   * no default
   */
  // filepath: '',

  /**
   * Require pragma
   * https://prettier.io/docs/en/options.html#require-pragma
   *
   * Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
   *
   * requirePragma: <bool>
   * default: false
   */
  // requirePragma: false,

  /**
   * Insert Pragma
   * https://prettier.io/docs/en/options.html#insert-pragma
   *
   * Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the --require-pragma option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
   *
   * insertPragma: <bool>
   * default: false
   */
  // insertPragma: false,

  /**
   * Prose Wrap
   * https://prettier.io/docs/en/options.html#prose-wrap
   *
   * By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer, e.g. GitHub comment and BitBucket. In some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out with "never".
   *
   * proseWrap: "<always|never|preserve>"
   * default: "preserve"
   */
  // proseWrap: 'preserve',

  /**
   * HTML Whitespace Sensitivity
   * https://prettier.io/docs/en/options.html#html-whitespace-sensitivity
   *
   * Specify the global whitespace sensitivity for HTML files, see whitespace-sensitive formatting for more info.
   *
   * htmlWhitespaceSensitivity: "<css|strict|ignore>"
   * default: "css"
   */
  // htmlWhitespaceSensitivity: 'css',

  /**
   * Vue files script and style tags indentation
   * https://prettier.io/docs/en/options.html#vue-files-script-and-style-tags-indentation
   *
   * Whether or not to indent the code inside <script> and <style> tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
   *
   * vueIndentScriptAndStyle: <bool>
   * default: false
   */
  // vueIndentScriptAndStyle: false,

  /**
   * End of Line
   * https://prettier.io/docs/en/options.html#end-of-line
   *
   * For historical reasons, there exist two common flavors of line endings in text files. That is \n (or LF for Line Feed) and \r\n (or CRLF for Carriage Return + Line Feed). The former is common on Linux and macOS, while the latter is prevalent on Windows. Some details explaining why it is so can be found on Wikipedia.
   *
   * endOfLine: "<lf|crlf|cr|auto>"
   * default: "lf"
   */
  // endOfLine: 'lf',
};

endsnippet

snippet theme "create theme"
import { createTheme } from '@mui/material'

const theme = createTheme({
	palette: {
		common: {

		},
	},
})

export default theme

endsnippet

snippet assets "assets"
import image from './image'
import logo from './logo'
import font from './font'

export default {
	image,
	logo,
}

endsnippet

snippet baseservice "base service"
import axios from 'axios'
import config from '../config/axios'

class Service 
{
	constructor(args)
	{
		this.axios = axios.create(config)
		this.path = args.path ? args.path : ''	

		//
	}

	index (filters = {}) 
	{

	}

	get (id) 
	{

	}

	post (body) 
	{

	}

	put ({ id, body }) 
	{

	}

	remove (id) 
	{

	}
}

export default Service

endsnippet

snippet service "service"
import Service from './service'

class $1Service extends Service 
{
	constructor (args) 
	{
		super(args)
	}
}

export default new $1Service({
	path: '/$2',
})

endsnippet

snippet routecom "private route"
import React, { Fragment, useState, useEffect } from 'react'

import { useTranslation } from 'react-i18next'
import { withStyles } from '@mui/styles'
import { Route } from 'react-router-dom'

import { connect } from 'react-redux'

import styles from './styles'
import props from './props'

import { Grid, Container } from '@mui/material'

const $1Route = ({
  component: Component,
  ...rest
}) => {
  const { t } = useTranslation()
  const { classes } = rest

	useEffect(() => {

  })

  return (
    <Fragment>
    </Fragment>
  )
}

$1Route.propTypes = props

const mapStateToProps = (state) => ({  

})

const mapDispatchToProps = (dispatch) => ({  

})

export default connect(
	mapStateToProps, 
	mapDispatchToProps,
)(withStyles(styles)($1Route))

endsnippet

snippet fbservice "firebase service"
import * as app from 'firebase/app'
import * as firebaseAuth from 'firebase/auth'
import config from '../config/firebase'

export const app = firebase.initializeApp(config)
export const auth = firebaseAuth.getAuth()

export const AuthService = firebaseAuth

endsnippet

snippet sname "style name"
style={styles.$1}
endsnippet

snippet asim "async image"
import React, { Fragment, useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'

import classes from './styles.module.css'
import props from './props'

import Skeleton from 'react-loading-skeleton'

const AsyncImage = props => {
  const { t } = useTranslation()
  const [status, setStatus] = useState(false)

  useEffect(() => {})

  const onLoad = e => setStatus(true)

  return (
    <Fragment>
      {status ? (
        <img
          src={props.src}
          alt={props.alt}
          style={{
            width: props.width,
            height: props.height,
          }}
        />
      ) : (
        <Fragment>
          <img
            src={props.src}
            alt={props.alt}
            style={{
              width: props.width,
              height: props.height,
            }}
            onLoad={onLoad}
          />
          <Skeleton
            width={props.width}
            height={props.height}
          />
        </Fragment>
      )}
    </Fragment>
  )
}

AsyncImage.propTypes = props

export default AsyncImage

endsnippet

snippet main "Main component"
import React, { Fragment, useState, useEffect } from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@mui/styles'
import {
  BrowserRouter,
  Route,
  Routes,
} from 'react-router-dom'
import Analytics from 'react-router-ga'
import analytics from '../../config/analytics'

import styles from './styles'
import props from './props'

import PublicRoute from '../../component/main/publicRoute/PublicRoute'
// import ProtectedRoute from '../../component/main/protectedRoute/ProtectedRoute'
// import PrivateRoute from '../../component/main/privateRoute/PrivateRoute'
import PublicIndex from '../../route/public.index'
// import ProtectedIndex from '../../route/protected.index'
// import PrivateIndex from '../../route/private.index'

const Main = (props) => {
  const { t } = useTranslation()
  const { classes } = props

  useEffect(() => {})

  return (
    <Fragment>
      <BrowserRouter>
        <Analytics id={analytics.id}>
          <Routes>
            <Route element={<PublicRoute />}>
              {PublicIndex.map((v, i) => (
                <Route
                  path={v.path}
                  element={<v.component />}
                  key={i}
                />
              ))}
            </Route>
          </Routes>
        </Analytics>
      </BrowserRouter>
    </Fragment>
  )
}

Main.propTypes = props

export default withStyles(styles)(Main)

endsnippet

snippet withsuspense "with suspense"
import React, { Fragment, Suspense } from 'react'

import ErrorBoundary from '../errorBoundary/ErrorBoundary'
import Fallback from '../fallback/Fallback'

const WithSuspense = Component => {
  return props => (
    <Fragment>
      <ErrorBoundary>
        <Suspense fallback={<Fallback />}>
          <Component {...props} />
        </Suspense>
      </ErrorBoundary>
    </Fragment>
  )
}

export default WithSuspense

endsnippet
