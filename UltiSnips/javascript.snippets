snippet req "require"
const $1 = require($2) $0
endsnippet

snippet reqc "require curly"
const { $1 } = require($2)$0
endsnippet

snippet	sp "spread"
...
endsnippet

snippet imp "import"
import $1 from '$1'
endsnippet

snippet impc "import curly"
import { $1 } from '$2'$0
endsnippet

snippet arr "arrow function"
($1) => { $2 }$0
endsnippet

snippet arro "arrow return object"
($1) => ({ $2 })
endsnippet

snippet arre "arrow export"
export const ($1) => {}
endsnippet

snippet arrf "arrow flat"
$1 => $2
endsnippet

snippet cl "console log"
console.log($1)$0
endsnippet

snippet then "then function"
.then(($1) => $2)$0
endsnippet

snippet catch "catch function"
.catch((err) => $2)$0
endsnippet

snippet filter "filter"
.filter((v, i, a) => { $2 })$0
endsnippet

snippet map "map"
.map((v, i) => $2)$0
endsnippet

snippet reduce "reduce"
.reduce((ac, v, i, a) => { $2 })$0
endsnippet

snippet promise "promise"
new Promise((resolve, reject) => { $1 })$0
endsnippet

snippet des "describe"
describe($1, (true) => { $0 })
endsnippet

snippet bef "before"
beforeEach(() => { $1 })$0
endsnippet

snippet befall "before all"
beforeAll(() => { $1 })$0
endsnippet

snippet af "after"
afterEach(() => { $1 })$0
endsnippet

snippet afall "after all"
afterAll(() => { $1 })$0
endsnippet

snippet exp "expect"
expect($1).$0
endsnippet

snippet modex "module export"
module.exports = $1
endsnippet

snippet exdef "export default"
export default $0
endsnippet

snippet exp	"export"
export { $0 }
endsnippet

snippet ptypes "react props"
$1.propTypes = {
	$0
}
endsnippet

snippet cname "class name"
className={ classes.$1 }
endsnippet

snippet cstyle "class name"
style={{ $1 }}
endsnippet

snippet comf "function component"
import React, { 
	Fragment,
	useState,
	useEffect,
} from 'react'
import { useTranslation } from 'react-i18next'
import { withStyles } from '@material-ui/core/styles'

import styles from './styles'
import props from './props'

import {

} from '@material-ui/core'

const $1 = (props) => {
	const { t } = useTranslation()
	const { classes } = props

	useEffect(() => {  })

	return <Fragment>
		
	</Fragment>
}

$1.propTypes = props

export default withStyles(styles)($1)

endsnippet

snippet icon "icon"
import $1Icon from '@material-ui/icons/$1'
endsnippet

snippet state "functional state"
const [$1, set${1/\w+/\u$0/g}] = useState($2)
endsnippet

snippet ter "ternary"
	props.$1 === $2 ?
	$3 : 
	null
endsnippet

snippet input "form handle"
const inputHandler = (e) => { 
	set$1({
		...$1,
		[e.target.name]: e.target.value}	
	)
}
endsnippet

snippet it "it"
it('$1', async (done) => {

	done()
})
endsnippet

snippet container "container"
<Container maxWidth={$1}>
	<Grid container>
	</Grid>
</Container>
endsnippet

snippet align "align"
alignItems={'$1'} justify={'$2'}
endsnippet

snippet gitem "grid item"
<Grid item xs={$1} sm={$1} md={$1} lg={$1} xl={$1}>
</Grid>
endsnippet

snippet styles "material ui styles"
const styles = theme => ({

})

export default styles
endsnippet

snippet props "react props"
import propTypes from 'prop-types'

export default {

}
endsnippet

snippet test "react test snip"
import React from 'react'
import { render } from '@testing-library/react'
import $1 from './$1'
import { BrowserRouter } from 'react-router-dom'

test('$1 component test', () => {
  const Render = render(
	  <BrowserRouter>
			<$1 />
		</BrowserRouter>
	)

	expect(true).toBe(true)
})
endsnippet

snippet tbd "breakpoints"
[theme.breakpoints.down('$1')]: {
	$2
}
endsnippet

snippet tbu "breakpoints"
[theme.breakpoints.up('$1')]: {
	$2
}
endsnippet

snippet tbb "breakpoints"
[theme.breakpoints.between('$1', '$2')]: {
	$2
}
endsnippet

snippet mt "margin top"
marginTop: '$1'
endsnippet

snippet mb "margin top"
marginBottom: '$1'
endsnippet

snippet ml "margin top"
marginLeft: '$1'
endsnippet

snippet mr "margin top"
marginRight: '$1'
endsnippet

snippet pt "margin top"
paddingTop: '$1'
endsnippet

snippet pb "margin top"
paddingBottom: '$1'
endsnippet

snippet pl "margin top"
paddingLeft: '$1'
endsnippet

snippet pr "margin top"
paddingRight: '$1'
endsnippet

snippet tt "text transform"
textTransform: 'none'
endsnippet

snippet td "text transform"
textDecoration: 'none'
endsnippet

snippet bg "backgroundColor"
backgroundColor: $1
endsnippet

snippet hov "hover"
'&:hover': {
	backgroundColor: '$1',
},
endsnippet

snippet tf "textField"
<TextField 
	fullWidth
	className={classes.textfield}
	margin={'dense'}
	variant={'outlined'}
	name={'$1'}
	onChange={$2}
	placeholder={$3}
	InputProps={{
	
	}}
/>
endsnippet

snippet button "button"
<Button
	fullWidth
	className={classes.button}
	onClick={}
	startIcon={}
>
		$1
</Button>
endsnippet

snippet style "style"
style={{ $1 }}
endsnippet

snippet tr "translation"
{t('$1')}
endsnippet

snippet color "colors"
import { $1 } from '@material-ui/core/colors'
endsnippet

snippet route "route"
{
	exact: false,
	path: '/$1',
	component: $2,
},
endsnippet

snippet router "express router"
import express from 'express'
import $1Controller from '../controller/${1/\w+/\l$0/g}_controller'

const router = express.Router()

router.get('/', $1Controller.index.bind($1Controller))
router.get('/:id', $1Controller.get.bind($1Controller))
router.post('/', $1Controller.post.bind($1Controller))
router.put('/:id', $1Controller.put.bind($1Controller))
router.delete('/:id', $1Controller.delete.bind($1Controller))

export default router
endsnippet

snippet controller "express controller"
import $1Service from '../service/${1/\w+/\l$0/g}_service'
import Controller from './controller'

class $1Controller extends Controller {
	constructor (args) {
		super(args)
	}

	index (req, res, next) {
	}

	get (req, res, next) {
	}

	post (req, res, next) {
	}

	put (req, res, next) {
	}

	delete (req, res, next) {
	}
}

export default new $1Controller({})
endsnippet

snippet service "express service"
import ${1/\w+/\u$0/g}Repository from '../repository/$1_repository'
import Service from './service'

class ${1/\w+/\u$0/g}Service extends Service {
	constructor(args) {
		super(args)
	}
}

export default new ${1/\w+/\u$0/g}Service({
	repository: ${1/\w+/\u$0/g}Repository,
})
endsnippet

snippet rrd "react router dom"
import {
	BrowserRouter,
	Switch,
	Route,
} from 'react-router-dom'
endsnippet

snippet model "mongoose model"
import mongoose, { Schema } from 'mongoose'

const ${1/\w+/\u$0/g}Schema = new Schema(
  {},
  { strict: false, timestamps: true },
)

/**
 *  @param name
 *  @param schema
 *  @param collection
 */
const ${1/\w+/\u$0/g} = mongoose.model('$1', ${1/\w+/\u$0/g}Schema, '$1s')

export default ${1/\w+/\u$0/g}
endsnippet

snippet pe "process env"
process.env.
endsnippet

snippet rtfn "router function"
(req, res, next) => {
	return 
}
endsnippet

snippet dotenv "dotenv"
import dotenv from 'dotenv'

dotenv.config()
endsnippet

snippet handler "handler"
const $1Handler = (e) => {}
endsnippet

snippet rts "routes"
import routes from '../../../route/routes'
endsnippet

snippet assets "assets"
import assets from '../../../style/assets'
endsnippet

snippet link "link"
import { Link } from 'react-router-dom'
endsnippet

snippet palet "main color"
theme.palette.primary.main
endsnippet

snippet white "main color"
theme.palette.common.white
endsnippet

snippet black "main color"
theme.palette.common.black
endsnippet

snippet space "spacing"
theme.spacing($1)
endsnippet

snippet adorn "adornment"
const $1 = {
	startAdornment: <InputAdornment>
		<$2 />
	</InputAdornment>
}
endsnippet

snippet maprx "redux connect"
const mapStateToProps = (state) => ({  

})

const mapDispatchToProps = (dispatch) => ({  

})

endsnippet

snippet store "redux store"
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
import rootReducer from '../reducer/root_reducer'

const store = createStore(
  rootReducer,
  applyMiddleware(thunk),
)

export default store
endsnippet

snippet connect "connect function"
export default connect(
	mapStateToProps, 
	mapDispatchToProps,
)(withStyles(styles)($1))
endsnippet

snippet dispatch "dispatch"
dispatch({
	type: $1,
	data: $2,
})
endsnippet

snippet rncom "react native component"
import React from 'react'
import {
	View,
} from 'react-native'
import styles from './styles'
import props from './props'
import i18n from '../../../locale/i18n'

const $1 = (props) => {  
	return <View>
	</View>
}

$1.propTypes = props

export default $1
endsnippet

snippet rnstyle "react native style"
import {
	StyleSheet,
} from 'react-native'

const styles = {

}

export default StyleSheet.create(styles)
endsnippet

snippet rntest "react native test"
import 'react-native'
import React from 'react'
import $1 from './$1'

import renderer from 'react-test-renderer'

it('renders correctly', () => {
  renderer.create(<$1 />)
})
endsnippet

snippet anim "animation"
'@global': {
	'@keyframes $1': {
		from: {},
		to: {},
		'0%': {},
		'100%': {},
	}
}
endsnippet

snippet mm "mongo model"
import mongoose from 'mongoose'

const schema = mongoose.Schema({

},{ 
	strict: false 
})

export default mongoose.model('$1', schema, '$1') 

endsnippet

snippet rh "responsive hidden"
<Hidden smDown>
$1
</Hidden>
<Hidden mdUp>
$2
</Hidden>
endsnippet

snippet rb "responsive break"
[theme.breakpoints.down('sm')]: {
	height: '$1',
},
[theme.breakpoints.between('sm','lg')]: {
	height: '$2',
},
[theme.breakpoints.up('lg')]: {
	height: '$3',
}
endsnippet

snippet fake "fake data"
const data = new Array($1)
	.fill({})
	.map((v, i) => ({  
		$0		
	}))
endsnippet

snippet pic "lorem picsum"
'https://picsum.photos/$1/$2'
endsnippet 

snippet authactions "auth actions"
export const LOGIN_WITH_EMAIL_REQUEST = 'LOGIN_WITH_EMAIL_REQUEST'
export const LOGIN_WITH_EMAIL_SUCCESS = 'LOGIN_WITH_EMAIL_SUCCESS'
export const LOGIN_WITH_EMAIL_ERROR = 'LOGIN_WITH_EMAIL_ERROR'

export const SIGNUP_WITH_EMAIL_REQUEST = 'SIGNUP_WITH_EMAIL_REQUEST'
export const SIGNUP_WITH_EMAIL_SUCCESS = 'SIGNUP_WITH_EMAIL_SUCCESS'
export const SIGNUP_WITH_EMAIL_ERROR = 'SIGNUP_WITH_EMAIL_ERROR'

export const SIGNIN_WITH_FACEBOOK_REQUEST = 'SIGNIN_WITH_FACEBOOK_REQUEST'
export const SIGNIN_WITH_FACEBOOK_SUCCESS = 'SIGNIN_WITH_FACEBOOK_SUCCESS'
export const SIGNIN_WITH_FACEBOOK_ERROR = 'SIGNIN_WITH_FACEBOOK_ERROR'

export const SIGNIN_WITH_GOOGLE_REQUEST = 'SIGNIN_WITH_GOOGLE_REQUEST'
export const SIGNIN_WITH_GOOGLE_SUCCESS = 'SIGNIN_WITH_GOOGLE_SUCCESS'
export const SIGNIN_WITH_GOOGLE_ERROR = 'SIGNIN_WITH_GOOGLE_ERROR'

endsnippet

snippet actions "redux action"
export const GET_$1S_REQUEST = 'GET_$1S_REQUEST'
export const GET_$1S_SUCCESS = 'GET_$1S_SUCCESS'
export const GET_$1S_ERROR = 'GET_$1S_ERROR'

export const GET_$1_REQUEST = 'GET_$1_REQUEST'
export const GET_$1_SUCCESS = 'GET_$1_SUCCESS'
export const GET_$1_ERROR = 'GET_$1_ERROR'

export const POST_$1_REQUEST = 'POST_$1_REQUEST'
export const POST_$1_SUCCESS = 'POST_$1_SUCCESS'
export const POST_$1_ERROR = 'POST_$1_ERROR'

export const PUT_$1_REQUEST = 'PUT_$1_REQUEST'
export const PUT_$1_SUCCESS = 'PUT_$1_SUCCESS'
export const PUT_$1_ERROR = 'PUT_$1_ERROR'

export const DELETE_$1_REQUEST = 'DELETE_$1_REQUEST'
export const DELETE_$1_SUCCESS = 'DELETE_$1_SUCCESS'
export const DELETE_$1_ERROR = 'DELETE_$1_ERROR'
endsnippet

snippet dispatcher "dispatchers"
import $1Service from '../../service/$1_service'
import * as actions from '../action/$1_actions'

export const get$1s = (filters) => (dispatch) => {  
	dispatch({
		type: actions.GET_`!p snip.rv=t[1].upper()`S_REQUEST,
		data: null,
	})
}

export const get$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.GET_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}

export const post$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.POST_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}

export const put$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.PUT_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}

export const delete$1 = (id) => (dispatch) => {  
	dispatch({
		type: actions.DELETE_`!p snip.rv=t[1].upper()`_REQUEST,
		data: null,
	})
}
endsnippet

snippet suite "test suite"
describe('$1 Test Suite', () => { 
	it('Example Test', async (done) => {
		expect(true).toBe(true)
		done()
	})	
})
endsnippet

snippet prom "promise"
new Promise ( (resolve, reject) => {   $1 
})
endsnippet

snippet rservice "service init"
import Service from './service'
import HttpService from './http_service'
import CacheService from './cache_service'

class $1Service extends Service {
	constructor (args) {
		super(args)
	}
}

export default new $1Service({
	http: HttpService,
	cache: CacheService,
})
endsnippet

snippet class "class"
class $1 {
	constructor () {

	}
}

export default $1
endsnippet 

snippet repo "repository"
import $1 from '../model/${1/\w+/\l$0/g}'
import Repository from './repository'

class $1Repository extends Repository {
  constructor(args) {
    super(args)
  }
}

export default new $1Repository({
	model: $1,
})
endsnippet

snippet event "express event"
import Event from '../event'

class $1 extends Event {
	constructor(args) {
		super(args)
	}
}

export default $1

endsnippet

snippet ax "axios"
axios
	.$1({
	
	})
	.then(res => res)
	.catch(err => err)
endsnippet

snippet i18n "i18n"
import i18n from 'i18next'
import languageDetector from 'i18next-browser-languagedetector'
import { initReactI18next } from 'react-i18next'
import xhr from 'i18next-xhr-backend'
import en from './translations/en_US.json'
import tr from './translations/tr_TR.json'

i18n
  .use(xhr)
  .use(languageDetector)
  .use(initReactI18next)
  .init({
    resources: {
      tr: tr,
      en: en,
    },
    lng: 'tr',
    fallbackLng: 'tr',
    debug: true,
    ns: ['translations'],
    defaultNS: 'translations',
    keySeparator: '.',
    interpolation: {
      escapeValue: false,
      formatSeparator: ',',
    },
    react: {
      useSuspense: false,
      wait: true,
      bindi18n: 'languagechanged loaded',
      bindI18nStore: 'added removed',
      nsMode: 'default',
    },
  })

export default i18n

endsnippet	

snippet helmet "helmet" 
<Helmet>
  <title>$1</title>
  <meta
    name='description'
    content='$2'
  />
</Helmet>
endsnippet

snippet app "app" 
import React from 'react'

import { I18nProvider } from 'react-i18next'
import i18n from './locale/i18n'

import { Provider } from 'react-redux'
import store from './redux/store/index'

import { ThemeProvider } from '@material-ui/core'
import theme from './style/theme'

import Main from './layout/main/Main'

const App = (props) => {
  return (
    <Fragment>
      <Provider store={store}>
        <I18nProvider i18n={i18n}>
          <ThemeProvider theme={theme}>
            <Main />
          </ThemeProvider>
        </I18nProvider>
      </Provider>
    </Fragment>
  )
}

export default App

endsnippet
