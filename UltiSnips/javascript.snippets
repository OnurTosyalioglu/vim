snippet req "require"
const $1 = require($2) $0
endsnippet

snippet reqc "require curly"
const { $1 } = require($2)$0
endsnippet

snippet	sp "spread"
...
endsnippet

snippet imp "import"
import $1 from $2
endsnippet

snippet impc "import curly"
import { $1 } from '$2'$0
endsnippet

snippet impr "import react"
import React, 
	{ 
		Component, 
		Fragment,
		useState, 
		useEffect, 
		useRef, 
		useContext,
}  from 'react'
endsnippet

snippet impm "import material"
import { makeStyles } from '@material-ui/core'

// import  from '@material-ui/icons'
endsnippet

snippet impro "import router"
import {
	BrowserRouter,
	Route,
	Link,
	Switch,
	useParams,
	useRouteMatch,
} from 'react-router-dom'
endsnippet 

snippet arrow "arrow function"
($1) => { $2 }$0
endsnippet

snippet arrowf "arrow flat"
$1 => $2
endsnippet

snippet cl "console log"
console.log($1)$0
endsnippet

snippet then "then function"
.then(($1) => { $2 })$0
endsnippet

snippet catch "catch function"
.catch((err) => { $2 })$0
endsnippet

snippet filter "filter"
.filter((v, i, a) => { $2 })$0
endsnippet

snippet map "map"
.map((v, i, a) => { $2 })$0
endsnippet

snippet reduce "reduce"
.reduce((ac, v, i, a) => { $2 })$0
endsnippet

snippet promise "promise"
new Promise((resolve, reject) => { $1 })$0
endsnippet

snippet des "describe"
describe($1, () => { $0 })
endsnippet

snippet bef "before"
before(() => { $1 })$0
endsnippet

snippet befall "before all"
beforeAll(() => { $1 })$0
endsnippet

snippet af "after"
after(() => { $1 })$0
endsnippet

snippet afall "after all"
afterAll(() => { $1 })$0
endsnippet

snippet exp "expect"
expect($1).$0
endsnippet

snippet class "class"
class $1 
{
	constructor($2)
	{	
		$3
	}	
	$0
}
endsnippet

snippet modex "module export"
module.exports = $1
endsnippet

snippet exdef "export default"
export default $0
endsnippet

snippet exp	"export"
export { $0 }
endsnippet

snippet ptypes "react props"
$1.propTypes = {
	$0
}
endsnippet

snippet imprh "main imports"
import React, { Component } from 'react'
import props from './props'
import styles from './styles'
endsnippet

snippet setst "state"
this.setState({ $1 })
endsnippet

snippet classes "classes"
const classes = styles()
endsnippet

snippet cname "class name"
className={ $1 }
endsnippet

snippet cstyle "class name"
style={{ $1 }}
endsnippet

snippet comp "react component"
import React, { Component, Fragment } from 'react'

class $1 extends Component 
{
	constructor(props)
	{	
		super (props)	

		this.state = {

		}
	}	

	componentDidMount () 
	{

	}

	render ()
	{
		return <Fragment>
				<div>$2</div>
			</Fragment>
	}
}

export default $1
endsnippet 

snippet listimp "Description" 
List,
ListItem,
ListItemIcon,
ListItemText,
ListItemAvatar,
ListItemSecondaryAction,
ListSubheader,
endsnippet

snippet comf "function component"
import React, { 
	Fragment,
	useState,
	useEffect,
} from 'react'

import styles from './styles'
import props from './props'
import { useTranslation } from 'react-i18next'

import {

} from '@material-ui/core'

// import  from '@material-ui/icons'

const $1 = (props) => {
	const { t, i18n } = useTranslation()
	const classes = styles()

	useEffect(() => {  })

	return <Fragment>
		
	</Fragment>
}

$1.propTypes =  props

export default $1
endsnippet

snippet funst "functional state"
const [$1, set$1] = useState($2)
endsnippet

snippet toggle "toggle"
const [open, setOpen] = useState(false)

const toggle = () => setOpen(prev => !prev)
endsnippet 

snippet ro "route"
<Route 
	path=$1
	component={$2}
/>
endsnippet

snippet ter "ternary"
	props.$1 === $2 ?
	$3 : 
	null
endsnippet

snippet ternot "ternary"
	props.$1 !== $2 ?
	$3 : 
	null
endsnippet

snippet card "material card"
<Card className={classes.card}>
	<CardHeader>
	</CardHeader>

	<CardMedia>
	</CardMedia>

	<CardContent>
	</CardContent>

	<CardActions>
	</CardActions>
</Card>
endsnippet

snippet cardcss "material card css"
card: {
	background: theme.palette.success.light,
	padding: theme.spacing(1),
	height: 200,
},
cardHeader: {

},
cardMedia: {

},
cardContent: {

},
cardActions: {

},
endsnippet

snippet handle "form handle"
const handleChange = (e) => {  }
const handleSubmit = (e) => {  }
endsnippet

snippet container "container"
<Container maxWidth={$1}>
</Container>
endsnippet

snippet gitem "grid item"
<Grid item xs={$1} sm={$1} md={$1} lg={$1} xl={$1}>
</Grid>
endsnippet

snippet styles "material ui styles"
import { makeStyles } from '@material-ui/core'

const styles = makeStyles(theme => ({

}))

export default styles
endsnippet

snippet props "react props"
import propTypes from 'prop-types'

export default {

}
endsnippet

snippet test "react test snip"
import React from 'react'
import { render } from '@testing-library/react'
import $1 from './$1'

test('$1 component test', () => {
  const { getByText } = render(<$1 />)
	// const linkElement = getByText(//i)
	// expect(linkElement).toBeInTheDocument()
	expect(true).toBe(true)
})
endsnippet

snippet break "breakpoints"
[theme.breakpoints.down('$1')]: {
	$2
}
endsnippet

snippet align "align"
display: 'flex',
justifyContent: 'center',
alignItems: 'center',
endsnippet

snippet style "style"
style={{ $1 }}
endsnippet

snippet tr "translation"
{t('$1')}
endsnippet

snippet color "colors"
import { $1 } from '@material-ui/core/colors'
endsnippet

snippet route "route"
{
	exact: false,
	path: '/$1',
	component: $2,
	key: '$1',
},
endsnippet
