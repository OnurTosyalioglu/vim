snippet aw "arrow"
=>
endsnippet

snippet this "this"
$this->
endsnippet

snippet earr "empty array"
= []
endsnippet

snippet arr "array"
[ $1 => $2 ]
endsnippet

snippet el "element"
$1 => $2,
endsnippet

snippet construct "class declaration"
public function __construct()
{
}

public function __get($name)
{
	return $this->$name;
}

public function __set($name, $value)
{
	$this->$name = $value;
}
endsnippet

snippet fun "function"
public function $1 ($2)
{
	return $0;
}
endsnippet

snippet fac "foreign factory" 
'$1' => $faker->randomElement($2::all()->pluck('id')->toArray()),$0
endsnippet

snippet seed "seeder"
try {
	factory($1::class, 100)->create();
	$this->command->info('$1s table seeded with 100 dummy data');
} catch (Exception $e) {
	$this->command->info('$1sTableSeeder exception');
	$this->command->info($e);
}
endsnippet

snippet setup "test setup method"
public function setUp(): void
{
		parent::setUp();
		$1
}$0
endsnippet

snippet test "test"
/** @test */
public function $1()
{
	$this->assertTrue(true);$0
}
endsnippet

snippet	info "info"
$this->command->info('$1');$0
endsnippet

snippet cont "controller function"
public function $1(Request $request, $2) 
{
	return $3
}$0
endsnippet

snippet greq "guzzle request"
$client = new Client();

$response = $client->$1(
	$2
)->getBody()->getContents();

return json_decode($response, true);$0
endsnippet

snippet pr "parameter"
$params = []
endsnippet

snippet confun "mongo connection string"
connection($this->connection)->
endsnippet

snippet conmo "connection" 
protected $connection = 'mongodb';
endsnippet

snippet conmy "connection" 
protected $connection = 'mysql';
endsnippet

snippet today "get today"
date('Y-m-d H:i:s');
endsnippet

snippet yesterday "get yesterday"
date('Y-m-d H:i:s', strtotime("-1 days"));
endsnippet

snippet rtmarket "market routes"
Route::prefix('order')->group(function () {});
Route::prefix('catalog')->group(function () {});
Route::prefix('product')->group(function () {});
Route::prefix('invoice')->group(function () {});
endsnippet

snippet rttest "test route"
Route::get('test', function() {
	$1
});
endsnippet

snippet monmo "mongo model connection"
protected $connection = 'mongodb';
protected $table = '$1';
protected $guarded = [];$0
public $timestamps = true;
endsnippet

snippet usemon "use mongo model"
use Jenssegers\Mongodb\Eloquent\Model;
endsnippet

snippet req "request"
Request $request
endsnippet

snippet ex "guzzle exception"
try {

} catch (Exception $e) {
	dd($e);
}
endsnippet

snippet routegr "route group"
Route::group(['namespace' => '$1'], function () {
	$2
});
endsnippet

snippet routepre "route prefix"
Route::prefix('$1')->group(function () {
	$2
});
endsnippet

snippet route "route"
Route::$1('$2', $3);
endsnippet

snippet routeprod "product route"
Route::get('/', '$1@get');
Route::get('/{id}', '$1@get');
Route::post('/', '$1@post');
Route::put('/{id}', '$1@put');
Route::delete('/{id}', '$1@delete');
endsnippet

snippet fncom "function snip"
/**
 * @name
 * 
 * @param 
 * @return 
 */
endsnippet

snippet dump "var dump"
var_dump($1)
endsnippet

snippet check "check params"
array_key_exists('', $params) ?
	$params : 
	$params['page'] = 0;
endsnippet
